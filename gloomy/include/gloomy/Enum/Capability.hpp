#pragma once
#include <gloomy/gl.hpp>
#include <gloomy/TypeAliases.hpp>
#include <gloomy/GL/Raw/Enum.hpp>

namespace gloomy {
	enum class Capability : Enum {
        CULL_FACE = gl::raw::CULL_FACE,    
        DEPTH_TEST = gl::raw::DEPTH_TEST,    
        SCISSOR_TEST = gl::raw::SCISSOR_TEST,    
        STENCIL_TEST = gl::raw::STENCIL_TEST,  
        BLEND = gl::raw::BLEND
     /*   ALPHA_TEST = gl::raw::ALPHA_TEST,    
        AUTO_NORMAL = gl::raw::AUTO_NORMAL,    
        BLEND = gl::raw::BLEND,    
        CLIP_PLANE = gl::raw::CLIP_PLANE,    
        COLOR_LOGIC_OP = gl::raw::COLOR_LOGIC_OP,    
        COLOR_MATERIAL = gl::raw::COLOR_MATERIAL,    
        COLOR_SUM = gl::raw::COLOR_SUM,    
        COLOR_TABLE = gl::raw::COLOR_TABLE,    
        CONVOLUTION_1D = gl::raw::CONVOLUTION_1D,    
        CONVOLUTION_2D = gl::raw::CONVOLUTION_2D,    
        CULL_FACE = gl::raw::CULL_FACE,    
        DEPTH_TEST = gl::raw::DEPTH_TEST,    
        DITHER = gl::raw::DITHER,	    
        FOG = gl::raw::FOG,    
        HISTOGRAM = gl::raw::HISTOGRAM,    
        INDEX_LOGIC_OP = gl::raw::INDEX_LOGIC_OP,    
        LIGHTi = gl::raw::LIGHTi,    
        LIGHTING = gl::raw::LIGHTING,    
        LINE_SMOOTH = gl::raw::LINE_SMOOTH,    
        LINE_STIPPLE = gl::raw::LINE_STIPPLE,    
        MAP1_COLOR_4 = gl::raw::MAP1_COLOR_4,    
        MAP1_INDEX = gl::raw::MAP1_INDEX,    
        MAP1_NORMAL = gl::raw::MAP1_NORMAL,    
        MAP1_TEXTURE_COORD_1 = gl::raw::MAP1_TEXTURE_COORD_1,    
        MAP1_TEXTURE_COORD_2 = gl::raw::MAP1_TEXTURE_COORD_2,    
        MAP1_TEXTURE_COORD_3 = gl::raw::MAP1_TEXTURE_COORD_3,    
        MAP1_TEXTURE_COORD_4 = gl::raw::MAP1_TEXTURE_COORD_4,    
        MAP1_VERTEX_3 = gl::raw::MAP1_VERTEX_3,    
        MAP1_VERTEX_4 = gl::raw::MAP1_VERTEX_4,    
        MAP2_COLOR_4 = gl::raw::MAP2_COLOR_4,    
        MAP2_INDEX = gl::raw::MAP2_INDEX,    
        MAP2_NORMAL = gl::raw::MAP2_NORMAL,    
        MAP2_TEXTURE_COORD_1 = gl::raw::MAP2_TEXTURE_COORD_1,    
        MAP2_TEXTURE_COORD_2 = gl::raw::MAP2_TEXTURE_COORD_2,    
        MAP2_TEXTURE_COORD_3 = gl::raw::MAP2_TEXTURE_COORD_3,    
        MAP2_TEXTURE_COORD_4 = gl::raw::MAP2_TEXTURE_COORD_4,    
        MAP2_VERTEX_3 = gl::raw::MAP2_VERTEX_3,    
        MAP2_VERTEX_4 = gl::raw::MAP2_VERTEX_4,    
        MINMAX = gl::raw::MINMAX,    
        MULTISAMPLE = gl::raw::MULTISAMPLE,    
        NORMALIZE = gl::raw::NORMALIZE,    
        POINT_SMOOTH = gl::raw::POINT_SMOOTH,    
        POINT_SPRITE = gl::raw::POINT_SPRITE,    
        POLYGON_OFFSET_FILL = gl::raw::POLYGON_OFFSET_FILL,    
        POLYGON_OFFSET_LINE = gl::raw::POLYGON_OFFSET_LINE,    
        POLYGON_OFFSET_POINT = gl::raw::POLYGON_OFFSET_POINT,    
        POLYGON_SMOOTH = gl::raw::POLYGON_SMOOTH,    
        POLYGON_STIPPLE = gl::raw::POLYGON_STIPPLE,    
        POST_COLOR_MATRIX_COLOR_TABLE = gl::raw::POST_COLOR_MATRIX_COLOR_TABLE,    
        POST_CONVOLUTION_COLOR_TABLE = gl::raw::POST_CONVOLUTION_COLOR_TABLE,    
        RESCALE_NORMAL = gl::raw::RESCALE_NORMAL,    
        SAMPLE_ALPHA_TO_COVERAGE = gl::raw::SAMPLE_ALPHA_TO_COVERAGE,    
        SAMPLE_ALPHA_TO_ONE = gl::raw::SAMPLE_ALPHA_TO_ONE,    
        SAMPLE_COVERAGE = gl::raw::SAMPLE_COVERAGE,    
        SEPARABLE_2D = gl::raw::SEPARABLE_2D,    
        SCISSOR_TEST = gl::raw::SCISSOR_TEST,    
        STENCIL_TEST = gl::raw::STENCIL_TEST,    
        TEXTURE_1D = gl::raw::TEXTURE_1D,    
        TEXTURE_2D = gl::raw::TEXTURE_2D,    
        TEXTURE_3D = gl::raw::TEXTURE_3D,    
        TEXTURE_CUBE_MAP = gl::raw::TEXTURE_CUBE_MAP,    
        TEXTURE_GEN_Q = gl::raw::TEXTURE_GEN_Q,    
        TEXTURE_GEN_R = gl::raw::TEXTURE_GEN_R,    
        TEXTURE_GEN_S = gl::raw::TEXTURE_GEN_S,    
        TEXTURE_GEN_T = gl::raw::TEXTURE_GEN_T,    
        VERTEX_PROGRAM_POINT_SIZE = gl::raw::VERTEX_PROGRAM_POINT_SIZE,    
        VERTEX_PROGRAM_TWO_SIDE = gl::raw::VERTEX_PROGRAM_TWO_SIDE,
	};*/
        };
}